Do not read the current ENVIRONMENT. Effectively stripping the environment for safety.
The current working directory needs to contain the modules before running Mk.
--- 9base-6/mk/env.c
+++ 9base-6/mk/env.c
@@ -34,10 +34,12 @@ void
 initenv(void)
 {
 	char **p;
+	Word *w;
 
 	for(p = myenv; *p; p++)
 		symlook(*p, S_INTERNAL, (void *)"");
-	readenv();				/* o.s. dependent */
+	w = newword(".");
+	setvar("PATH", (void *)w);
 }
 
 static void
By default set the target as VIRTUAL and suppress output.
--- 9base-6/mk/parse.c
+++ 9base-6/mk/parse.c
@@ -229,6 +229,8 @@ rhead(char *line, Word **h, Word **t, in
 			Exit();
 		}
 	}
+	*attr |= VIR;
+	*attr |= QUIET;
 	*h = w = stow(line);
 	if(*w->s == 0 && sep != '<' && sep != '|' && sep != 'S') {
 		SYNERR(mkinline-1);
Also disable path expansion and treat unset variables as an error. Set default parallel execution to 8 chunks.
--- 9base-6/mk/run.c
+++ 9base-6/mk/run.c
@@ -81,7 +81,7 @@ sched(void)
 		if(j->r->attr&NOMINUSE)
 			flags = 0;
 		else
-			flags = "-e";
+			flags = "-efu";
 		events[slot].pid = execsh(flags, j->r->recipe, 0, e, j->r->shellt, j->r->shellcmd);
 		usage();
 		nrunning++;
@@ -187,7 +187,7 @@ nproc(void)
 			nproclimit = atoi(w->s);
 	}
 	if(nproclimit < 1)
-		nproclimit = 1;
+		nproclimit = 8; 
 	if(DEBUG(D_EXEC))
 		fprint(1, "nprocs = %d\n", nproclimit);
 	if(nproclimit > nevents){
